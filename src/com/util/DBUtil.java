package com.util;

import java.io.IOException;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;

/**
 * 数据库工具类
 * @author 杨译
 * @time:2018年5月23日 上午10:42:57
 * @Description:TODO
 */
public class DBUtil {
	
	static{
		Properties prop = new Properties();
		try {
			prop.load(Thread.currentThread().getContextClassLoader()
					.getResourceAsStream("jdbc.properties"));
			String url = prop.getProperty("url");
			String username = prop.getProperty("username");
			String password = prop.getProperty("password");
			String driver = prop.getProperty("driver");
			int pool_max_size = Integer.parseInt(prop.getProperty("pool_max_size"));
			int pool_min_size = Integer.parseInt(prop.getProperty("pool_min_size"));
			
			ConnectionPool.setUrl(url);
			ConnectionPool.setUsername(username);
			ConnectionPool.setPassword(password);
			ConnectionPool.setDriver(driver);
			ConnectionPool.setPool_max_size(pool_max_size);
			ConnectionPool.setPool_min_size(pool_min_size);
		} catch (IOException e) {
			// TODO 自动生成的 catch 块
			e.printStackTrace();
			System.out.println("读取配置文件出错");
		} catch (NumberFormatException e){
			e.printStackTrace();
			System.out.println("数字转换出错");
			System.exit(0);
		}
		
	}
	private static ConnectionPool cp = ConnectionPool.getInstance();
	/**
	 * 获取数据库连接
	 * @return 
	 * Connection
	 */
	public static Connection getConn(){
		Connection conn = cp.getConn();
		return conn;
	}
	
	/*
	 * 获取PreparedStatement    
	 * Override
	 */
	public static PreparedStatement getStmt(Connection conn, String sql){
		PreparedStatement pstmt = null;
		if(conn != null){
			try {
				pstmt = conn.prepareStatement(sql);
			} catch (SQLException e) {
				// TODO 自动生成的 catch 块
				e.printStackTrace();
			}
		}
		return pstmt;
	}
	
	/**
	 * 
	 * @param conn
	 * @param sql
	 * @return 
	 * CallableStatement
	 */
	public static CallableStatement getCStmt(Connection conn, String sql){
		CallableStatement cstmt = null;
		if(conn != null){
			try {
				cstmt = conn.prepareCall(sql);
			} catch (SQLException e) {
				// TODO 自动生成的 catch 块
				e.printStackTrace();
			}
		}
		return cstmt;
	}
	
	/*
	 * 获取PreparedStatement   自动生成的key  
	 * Override
	 */
	public static PreparedStatement getStmt(Connection conn, String sql, int autoGeneratedKey){
		PreparedStatement pstmt = null;
		if(conn != null){
			try {
				pstmt = conn.prepareStatement(sql, autoGeneratedKey);
			} catch (SQLException e) {
				// TODO 自动生成的 catch 块
				e.printStackTrace();
			}
		}
		return pstmt;
	}
	
	/* Override
	 */
	public static Statement getStmt(Connection conn){
		Statement stmt = null;
		if(conn != null){
			try {
				stmt = conn.createStatement();
			} catch (SQLException e) {
				// TODO 自动生成的 catch 块
				e.printStackTrace();
			}
		}
		return stmt;
	}
	/*
	 * 查询
	 */
	public static ResultSet exeQuery(PreparedStatement stmt){
		ResultSet rs = null;
		if(stmt != null){
			try {
				rs = stmt.executeQuery();
			} catch (SQLException e) {
				// TODO 自动生成的 catch 块
				e.printStackTrace();
			}
		}
		return rs;
	}
	/*
	 * 查询
	 */
	public static ResultSet exeQuery (Statement stmt, String sql){
		ResultSet rs = null;
		if(stmt != null){
			try {
				rs = stmt.executeQuery(sql);
			} catch (SQLException e) {
				// TODO 自动生成的 catch 块
				e.printStackTrace();
			}
		}
		return rs;
	}
	/*
	 * 万能查询,不用获取连接，不用获取语句，不用手动关闭   
	 */
	public static Object exeQuery (String sql,Object params[],IResultSetHandler rsh){
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try{
			conn = getConn();
			pstmt = conn.prepareStatement(sql);
			if(params != null){
				for(int i=0; i<params.length; i++){
					pstmt.setObject(i+1, params[i]);/*注意  i+1*/
				}
			}
			rs = pstmt.executeQuery();
			
			return rsh.handler(rs);	//交给rsh处理
			
		} catch(SQLException e){
			e.printStackTrace();
		} finally{
			close(pstmt);  
			close(conn);
		}
		return null;
	}
	
	public static Object exeCSQuery (String sql, Object params[],IResultSetHandler rsh){
		Connection conn = null;
		CallableStatement cs = null;
		ResultSet rs = null;
		try{
			conn = getConn();
			cs = conn.prepareCall(sql);
			for(int i=0; i<params.length; i++){
				cs.setObject(i+1, params[i]);/*注意  i+1*/
			}
			rs = cs.executeQuery();
			
			return rsh.handler(rs);	//交给rsh处理
			
		} catch(SQLException e){
			e.printStackTrace();
		} finally{
			close(cs);  
			close(conn);
		}
		return null;
	}
	
	public static int exeUpdate(PreparedStatement pstmt){
		int affectRow = 0;
		if(pstmt != null){
			try {
				affectRow = pstmt.executeUpdate();
			} catch (SQLException e) {
				// TODO 自动生成的 catch 块
				e.printStackTrace();
			}
		}
		return affectRow;
	}
	
	/*
	 * 关闭资源
	 */
	public static void close(Connection conn){
		if(conn != null){
			cp.close(conn);
		}
	}
	
	public static void close (Statement stmt){
		if(stmt != null){
			try {
				stmt.close();
				stmt = null;
			} catch (SQLException e) {
				// TODO 自动生成的 catch 块
				e.printStackTrace();
			}
		}
		
	}

	public static void close(ResultSet rs) {
		// TODO 自动生成的方法存根
		if(rs != null){
			try {
				rs.close();
				rs = null;
			} catch (SQLException e) {
				// TODO 自动生成的 catch 块
				e.printStackTrace();
			}
		}
	}
	
}
